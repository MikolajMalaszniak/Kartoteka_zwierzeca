# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/petappmain.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import json
from PyQt5 import QtCore, QtGui, QtWidgets
from addPet_bod import Ui_Form
from ast import literal_eval
from messageBox import messagebox
from db.db_conn import dbConnection
from PyQt5.QtWidgets import QTableWidgetItem as tableItem

class Ui_MainWindow(object):
    resetTableRow = -1
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(809, 573)
        MainWindow.setMinimumSize(QtCore.QSize(809, 572))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.labelPets = QtWidgets.QLabel(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(21)
        self.labelPets.setFont(font)
        self.labelPets.setTextFormat(QtCore.Qt.AutoText)
        self.labelPets.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPets.setIndent(-1)
        self.labelPets.setObjectName("labelPets")
        self.tableWidgetPets = QtWidgets.QTableWidget(self.splitter)
        self.tableWidgetPets.setObjectName("tableWidgetPets")
        self.tableWidgetPets.setColumnCount(0)
        self.tableWidgetPets.setRowCount(0)
        self.verticalLayout.addWidget(self.splitter)
        self.pushButtonAddPet = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonAddPet.setObjectName("pushButtonAddPet")
        self.verticalLayout.addWidget(self.pushButtonAddPet)
        self.pushButtonRemovePet = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonRemovePet.setObjectName("pushButtonRemovePet")
        self.verticalLayout.addWidget(self.pushButtonRemovePet)
        self.pushButtonUpdatePet = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonUpdatePet.setObjectName("pushButtonUpdatePet")
        self.verticalLayout.addWidget(self.pushButtonUpdatePet)
        self.horizontalLayout.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.widget = QtWidgets.QWidget(self.splitter_2)
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.labelAppointments = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.labelAppointments.setFont(font)
        self.labelAppointments.setTextFormat(QtCore.Qt.AutoText)
        self.labelAppointments.setAlignment(QtCore.Qt.AlignCenter)
        self.labelAppointments.setIndent(-1)
        self.labelAppointments.setObjectName("labelAppointments")
        self.verticalLayout_3.addWidget(self.labelAppointments)
        self.tableWidgetAppointments = QtWidgets.QTableWidget(self.widget)
        self.tableWidgetAppointments.setObjectName("tableWidgetAppointments")
        self.tableWidgetAppointments.setColumnCount(0)
        self.tableWidgetAppointments.setRowCount(0)
        self.verticalLayout_3.addWidget(self.tableWidgetAppointments)
        self.pushButtonCancelAppointment = QtWidgets.QPushButton(self.widget)
        self.pushButtonCancelAppointment.setObjectName("pushButtonCancelAppointment")
        self.verticalLayout_3.addWidget(self.pushButtonCancelAppointment)
        self.widget1 = QtWidgets.QWidget(self.splitter_2)
        self.widget1.setObjectName("widget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.widget1)
        self.calendarWidget.setMinimumSize(QtCore.QSize(471, 171))
        self.calendarWidget.setGridVisible(True)
        self.calendarWidget.setObjectName("calendarWidget")
        self.verticalLayout_2.addWidget(self.calendarWidget)
        self.label = QtWidgets.QLabel(self.widget1)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.lineEditAppointment = QtWidgets.QLineEdit(self.widget1)
        self.lineEditAppointment.setObjectName("lineEditAppointment")
        self.verticalLayout_2.addWidget(self.lineEditAppointment)
        self.pushButtonAppointment = QtWidgets.QPushButton(self.widget1)
        self.pushButtonAppointment.setObjectName("pushButtonAppointment")
        self.verticalLayout_2.addWidget(self.pushButtonAppointment)
        self.horizontalLayout.addWidget(self.splitter_2)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 809, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.appointmentmsg = 0
        self.pushButtonAddPet.clicked.connect(self.addpet)
        self.pushButtonAppointment.clicked.connect(self.addappointment)
        self.pushButtonRemovePet.clicked.connect(self.deletePet)
        self.pushButtonUpdatePet.clicked.connect(self.updatePet)
        try:
            with open(".config", "r+t") as f:
                # checking if file is empty
                if f.read().strip():
                    f.seek(0)
                    l = f.readline()
                    l = json.loads(l)
                    self.user_conf = dict(l)
                    
                else:
                    raise Exception("File is empty")

        except (Exception,FileNotFoundError) as e:
            messagebox("Crital!", "No config found or it\'s empty!", "Warning")
            raise e

        self.refreshTables()
        self.tableWidgetPets.clearSelection()
        self.tableWidgetPets.itemClicked.connect(self.checkIfClicked)
        self.changes = {}
        self.tableWidgetPets.itemChanged.connect(self.store_change)
        

    def checkIfClicked(self):
        self.resetTableRow = 0

        
    def refreshTables(self):
        db = dbConnection()
        
        qPet = """SELECT animals.name, animals.age, animals.type, to_char(animals.vacination_date, 'DD-MM-YYYY'), to_char(animals.birth_date, 'DD-MM-YYYY'), animals.animal_id FROM animals where animals.user_id = %s"""
        qAppointment = """SELECT appointments.title, to_char(appointments.date, 'DD-MM-YYYY') ,animals.name
                          FROM appointments
                          JOIN animals ON appointments.animal_id = animals.animal_id 
                          WHERE appointments.user_id = %s;"""
        
        db.connect()
        self.rowsPet = db.fetchall(qPet, self.user_conf['id'])
        db.connect()
        self.rowsAppointment = db.fetchall(qAppointment, self.user_conf['id'])
        
        # Table pets
        self.tableWidgetPets.setRowCount(len(self.rowsPet))
        self.tableWidgetPets.setColumnCount(6)
        self.tableWidgetPets.setHorizontalHeaderLabels(["Name", "Age", "Type", "Vacination Date", "Birth Date", "animal_id"])
        
        for j in range(0, len(self.rowsPet)):
            for i in range(0, len(self.rowsPet[j])):
                self.tableWidgetPets.setItem(j, i, tableItem(str(self.rowsPet[j][i])))
        self.tableWidgetPets.hideColumn(5)
        # Table appointmenst
        self.tableWidgetAppointments.setRowCount(len(self.rowsAppointment))
        self.tableWidgetAppointments.setColumnCount(3)
        self.tableWidgetAppointments.setHorizontalHeaderLabels(["Title", "Date", "Pet"])

        for j in range(0, len(self.rowsAppointment)):
            for i in range(0, len(self.rowsAppointment[j])):
                self.tableWidgetAppointments.setItem(j, i, tableItem(str(self.rowsAppointment[j][i])))    
                

        self.tableWidgetPets.repaint()
        self.tableWidgetAppointments.repaint()

    def insertPet(self, name, age, type_pet):
        print(name," ", age, type_pet)

    def addpet(self):
        self.box=Ui_Form()
        self.uiwin = QtWidgets.QWidget()
        self.box.setupUi(self.uiwin)
        self.uiwin.show()

        self.box.petAdded.connect(self.refreshTables)
        
    def addappointment(self):
        if self.resetTableRow == 0:
            db = dbConnection()
            q = "INSERT INTO appointments(title, date, user_id, animal_id) values(%s, %s, %s, %s)"
            
            title = self.lineEditAppointment.text()
            print(title)
            if title.strip():
                
                date = str(self.calendarWidget.selectedDate().toPyDate())
                row = self.tableWidgetPets.currentRow()
                name = self.tableWidgetPets.item(row, 5).text()
                params = (title, date, self.user_conf['id'], name)
                db.connect()
                result = db.insert(q, params)
                if result == 1:
                    messagebox("Succes", "Appointment has been made", "Information")
                    self.refreshTables()
                else:
                    messagebox("Fail", "Appointment hasn\'t been made", "Warning")
            else:
                messagebox("Warning", "Please enter title for your appointment", "Warning")
        else:
            messagebox("Inforamtion", "Before make appointment select pet from table!", "Warning")

    def deletePet(self):
        if self.resetTableRow == 0:
            row = self.tableWidgetPets.currentRow()
            petId = self.tableWidgetPets.item(row, 5).text()
            db = dbConnection()
            db.connect()
            q = """DELETE FROM animals where animals.animal_id=%s"""
            params = (petId,)
            result = db.drop(q, params)
            if result == 1:
                messagebox("Succes", "Pet has been deleted", "Information")
                self.refreshTables()
        else:
            messagebox("Warning", "Select pet to be deleted", "Warning")

    def updatePet(self):
        coulmn_names = {0:"name", 1:"age", 2:"type", 3:"vacination_date", 4:"Birth_date"}
        set_val = []
        for key, value in self.changes.items():
            print(f"Row {key[0]}, Column {key[1]}: {value}")
            item_ch =self.tableWidgetPets.item(key[0], 5).text()
            
            st = f"{coulmn_names[key[1]]}={value}"
            set_val.append(st)
        q = """UPDATE animals SET %s where animals.user_id=%s"""
        
        print(set_val)

    def store_change(self, item):
        # Store the change in the dictionary
        self.changes[(item.row(), item.column())] = item.text()
        print(self.changes)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PetsApp"))
        self.labelPets.setText(_translate("MainWindow", "Pets"))
        self.pushButtonAddPet.setText(_translate("MainWindow", "Add pet"))
        self.pushButtonRemovePet.setText(_translate("MainWindow", "Remove pet"))
        self.pushButtonUpdatePet.setText(_translate("MainWindow", "Update pet"))
        self.labelAppointments.setText(_translate("MainWindow", "Appointments"))
        self.pushButtonCancelAppointment.setText(_translate("MainWindow", "Cancel appointment"))
        self.label.setText(_translate("MainWindow", "Title of appointment"))
        self.pushButtonAppointment.setText(_translate("MainWindow", "Make appointment"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
